<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.dranawhite.spring.aop" />

    <!-- 配置一个代理 -->
    <bean id="proxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean">
        <!-- 需要动态实现的接口 -->
        <property name="interfaces" value="com.dranawhite.spring.aop.Apolopy" />
        <!-- 被代理的类 -->
        <property name="target" ref="person" />
        <!-- 拦截器名称，bean id -->
        <property name="interceptorNames">
            <list>
                <value>personAroundAdvice</value>
                <value>personIntroductionAdvice</value>
            </list>
        </property>
        <!-- 默认值为false，表明代理接口，此时使用JDK动态代理；true表明代理类，此时使用CGLIB动态代理 -->
        <property name="proxyTargetClass" value="true" />
    </bean>

    <!-- 配置一个切面 -->
    <!-- RegexpMethodPointcutAdvisor是正则表达式切面
     其它切面有：
         DefaultPointcutAdvisor——默认切面，可扩展它来自定义切面
         NameMatchMethodPointcutAdvisor——根据方法名称进行匹配的切面
         StaticMethodMatcherPointcutAdvisor——用于匹配静态方法的切面-->
    <bean id="advisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="personAroundAdvice" />
        <!-- 切点，正则表达式, ".*"表示匹配所有字符 -->
        <property name="pattern" value="com.dranawhite.spring.aop.Person.sayGood.*" />
    </bean>
    <bean id="proxyAdvisorFactoryBean"
          class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="person" />
        <!-- 此处值改为切面 -->
        <property name="interceptorNames" value="advisor" />
        <property name="proxyTargetClass" value="true" />
    </bean>

    <!-- BeanNameAutoProxyCreator可以根据bean名称来自动生成代理 -->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <!-- 正则表达式，如果是*Impl，则为后缀是Impl的bean生成代理 -->
        <property name="beanNames" value="Person" />
        <property name="interceptorNames" value="personAroundAdvice" />
        <!-- 是否对代理生成策略进行优化，如果该类有接口就代理接口，如果没有接口则代理类 -->
        <property name="optimize" value="true" />
    </bean>

    <!-- 基于切面的自动代理生成器 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <property name="optimize" value="true" />
    </bean>
    <bean id="autoAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="personAroundAdvice" />
        <!-- 切点，正则表达式, ".*"表示匹配所有字符 -->
        <property name="pattern" value="com.dranawhite.spring.aop.Person.sayGood.*" />
    </bean>

</beans>